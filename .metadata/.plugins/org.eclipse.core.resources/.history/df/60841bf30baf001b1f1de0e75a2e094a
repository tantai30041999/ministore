package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import bean.Product;
import db.ConnectionDB;

public class ProductDAO {
	 public static int productDisplay = 10;

	    
	 
	    public static List<Product> getAllProduct() {
	        String sql = "SELECT * FROM `product` AS p INNER JOIN typeproduct AS tp ON p.idType = tp.idType";
	        Connection con = null;
	        List<Product> listProduct = null;
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            ResultSet rs = pre.executeQuery();
	            listProduct = new ArrayList<Product>();
	            while (rs.next()) {
	                String idProduct = rs.getString("idProduct");
	                String nameProduct = rs.getString("nameProduct");
	                double price = rs.getInt("priceProduct");
	                double sale = rs.getDouble("sale");
	                String image = rs.getString("image");
	                String typeProduct = rs.getString("typeName");
	                Date expiration = rs.getDate("expiration");
	                boolean active = ((rs.getInt("activeProduct") == 1) ? true : false);
	                listProduct.add(new Product(idProduct, nameProduct, price, sale, image, typeProduct, expiration, active));
	            }
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	        ConnectionDB.pool.releaseConnection(con);
	        return listProduct;
	    }

	    public static Product getProductById(String idProduct) {
	        String sql = "SELECT * FROM `product` AS p INNER JOIN typeproduct AS tp ON p.idType = tp.idType WHERE p.idProduct = ?";
	        Connection con = null;
	        Product product = new Product();
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            pre.setString(1, idProduct);
	            ResultSet rs = pre.executeQuery();
	            rs.last();
	            product.setIdProduct(idProduct);
	            product.setNameProduct(rs.getString("nameProduct"));
	            product.setPrice(rs.getInt("priceProduct"));
	            product.setSale(rs.getDouble("sale"));
	            product.setImage(rs.getString("image"));
	            product.setTypeProduct(rs.getString("typeName"));
	            product.setExpiration(rs.getDate("expiration"));
	            product.setActive(((rs.getInt("activeProduct") == 1) ? true : false));
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	        return product;
	    }

	    public static List<Product> getListProductPage(int indexPage) {
	        if (indexPage < 1) indexPage = 1;
	        indexPage = (indexPage - 1) * productDisplay;
	        String sql = "SELECT * FROM `product` AS p INNER JOIN typeproduct AS tp ON p.idType = tp.idType LIMIT ?,";
	        sql += productDisplay;
	        Connection con = null;
	        List<Product> listProduct = null;
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            pre.setInt(1, indexPage);
	            ResultSet rs = pre.executeQuery();
	            listProduct = new ArrayList<Product>();
	            while (rs.next()) {
	                String idProduct = rs.getString("idProduct");
	                String nameProduct = rs.getString("nameProduct");
	                double price = rs.getInt("priceProduct");
	                double sale = rs.getDouble("sale");
	                String image = rs.getString("image");
	                String typeProduct = rs.getString("typeName");
	                Date expiration = rs.getDate("expiration");
	                boolean active = ((rs.getInt("activeProduct") == 1) ? true : false);
	                listProduct.add(new Product(idProduct, nameProduct, price, sale, image, typeProduct, expiration, active));
	            }
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	        ConnectionDB.pool.releaseConnection(con);
	        return listProduct;
	    }

	    public static int numberOfPage() {
	        int result = (ProductDAO.getAllProduct().size() / productDisplay) + 1;
	        return result;
	    }

	    public static void insertProduct(String idProduct, String nameProduct, int priceProduct, int quantityInStock, int quantitySell, Date expiration, int activeProduct, double VAT, double sale, String image, String idSupplier, String idStore, String idType) {
	        String sql = "INSERT INTO `product` VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	        Connection con = null;
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            pre.setString(1, idProduct);
	            pre.setString(2, nameProduct);
	            pre.setInt(3, priceProduct);
	            pre.setInt(4, quantityInStock);
	            pre.setInt(5, quantitySell);
	            pre.setDate(6, expiration);
	            pre.setInt(7, activeProduct);
	            pre.setDouble(8, VAT);
	            pre.setDouble(9, sale);
	            pre.setString(10, image);
	            pre.setString(11, idSupplier);
	            pre.setString(12, idStore);
	            pre.setString(13, idType);
	            pre.executeUpdate();
	            System.out.println("Thêm thành công");
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	    }

	    public static void removeProduct(String idProduct) {
	        String sql = "DELETE FROM `product` WHERE idProduct = ?";
	        Connection con = null;
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            pre.setString(1, idProduct);
	            pre.executeUpdate();
	            System.out.println("Xóa thành công");
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	    }

	    public static void updateProduct(String idProduct, String nameProduct, int priceProduct, int quantityInStock, int quantitySell, Date expiration, int activeProduct, double VAT, double sale, String image, String idSupplier, String idStore, String idType) {
	        String sql = "UPDATE `product` SET nameProduct = ?, priceProduct = ?, quantityInStock = ?, quantitySell = ?, expiration = ?, activeProduct = ?, VAT = ?, sale = ?, image = ?, idSupplier = ?, idStore = ?, idType = ? WHERE idProduct = ?";
	        Connection con = null;
	        try {
	            con = ConnectionDB.connect();
	            PreparedStatement pre = con.prepareStatement(sql);
	            pre.setString(1, nameProduct);
	            pre.setInt(2, priceProduct);
	            pre.setInt(3, quantityInStock);
	            pre.setInt(4, quantitySell);
	            pre.setDate(5, expiration);
	            pre.setInt(6, activeProduct);
	            pre.setDouble(7, VAT);
	            pre.setDouble(8, sale);
	            pre.setString(9, image);
	            pre.setString(10, idSupplier);
	            pre.setString(11, idStore);
	            pre.setString(12, idType);
	            pre.setString(13, idProduct);
	            pre.executeUpdate();
	            System.out.println("Cập nhập thành công");
	        } catch (ClassNotFoundException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.print(e.getMessage());
	            ConnectionDB.pool.releaseConnection(con);
	        }
	    }
	    public static int countTypeProduct() {
	    	String sql = "select count(distinct idType) as sumTypeProduct from product;";
	    	int count = 0;
	    	Connection con = null;
	    	try {
				con = ConnectionDB.connect();
				PreparedStatement pre = con.prepareStatement(sql);
				ResultSet rs= pre.executeQuery();
				rs.last();
				count = Integer.parseInt(rs.getString("sumTypeProduct"));
			} catch (ClassNotFoundException | SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	return count;
	    }
	    public static int countProductInStock() {
	    	
	    	return 0;
	    }


	    public static void main(String[] args) {
//	        for (Product product : getListProductPage(1)) {
//	            System.out.println(product);
//	        }
//	        System.out.println(numberOfPage());
//	        insertProduct("SP00101","Hello",50000,100,25,Date.valueOf(LocalDate.now()),1,0.0,0.0,"","NCC0053","ST0001","TYPE0008");
//	        removeProduct("SP00101");
	    	System.out.println(countTypeProduct());
//	        updateProduct("SP00101","Hello World",50000,100,25,Date.valueOf(LocalDate.now()),1,0.0,0.0,"","NCC0053","ST0001","TYPE0008");
//	        System.out.println(localDate);
	    }

}
